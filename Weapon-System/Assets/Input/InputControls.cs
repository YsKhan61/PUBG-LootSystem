//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Weapon_System
{
    public partial class @InputControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""5c3c2922-436a-41b5-aaf5-e1391766132c"",
            ""actions"": [
                {
                    ""name"": ""Gun_Slot_1_Choose"",
                    ""type"": ""Button"",
                    ""id"": ""82111dab-77cf-49e0-8c12-d513c6e0e2cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gun_Slot_2_Choose"",
                    ""type"": ""Button"",
                    ""id"": ""afa0533e-ef77-453d-b974-e0a3700be563"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""b4433e29-da6d-42d2-9eae-0a73b547e6cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ADS"",
                    ""type"": ""Button"",
                    ""id"": ""51ddd764-507a-4167-8cb7-9ea0c01e91b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Holster"",
                    ""type"": ""Button"",
                    ""id"": ""85d4616c-9bac-48d5-af27-798f05a170ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""7a421347-e917-4f6b-98b0-781c426eb155"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""51839d25-6dac-46f3-b2a3-388307a3e582"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""d099388d-69d7-4813-9ac9-7fd329344b29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c0eb24f9-4d58-456e-9ff2-64b2f4c56b28"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""Gun_Slot_1_Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d06294d-4a23-424b-9476-3c51377d6a60"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""Gun_Slot_2_Choose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a14b08e-a5cf-4642-ae82-0f7cf23442a7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7edfe8ad-fcfb-4765-a759-b63a05787541"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""ADS"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb39d51e-dd71-415a-9013-fc2651d83062"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Holster"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""543edc80-c026-4610-ab99-c730d420a4df"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06544624-4e53-40c9-8673-4932c8b7c8e2"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c208df6-f46c-4b77-8330-ff7950bbf8fd"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse_And_Keyboard"",
            ""bindingGroup"": ""Mouse_And_Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Gun_Slot_1_Choose = m_Player.FindAction("Gun_Slot_1_Choose", throwIfNotFound: true);
            m_Player_Gun_Slot_2_Choose = m_Player.FindAction("Gun_Slot_2_Choose", throwIfNotFound: true);
            m_Player_Fire = m_Player.FindAction("Fire", throwIfNotFound: true);
            m_Player_ADS = m_Player.FindAction("ADS", throwIfNotFound: true);
            m_Player_Holster = m_Player.FindAction("Holster", throwIfNotFound: true);
            m_Player_Reload = m_Player.FindAction("Reload", throwIfNotFound: true);
            m_Player_Pickup = m_Player.FindAction("Pickup", throwIfNotFound: true);
            m_Player_Drop = m_Player.FindAction("Drop", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Gun_Slot_1_Choose;
        private readonly InputAction m_Player_Gun_Slot_2_Choose;
        private readonly InputAction m_Player_Fire;
        private readonly InputAction m_Player_ADS;
        private readonly InputAction m_Player_Holster;
        private readonly InputAction m_Player_Reload;
        private readonly InputAction m_Player_Pickup;
        private readonly InputAction m_Player_Drop;
        public struct PlayerActions
        {
            private @InputControls m_Wrapper;
            public PlayerActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Gun_Slot_1_Choose => m_Wrapper.m_Player_Gun_Slot_1_Choose;
            public InputAction @Gun_Slot_2_Choose => m_Wrapper.m_Player_Gun_Slot_2_Choose;
            public InputAction @Fire => m_Wrapper.m_Player_Fire;
            public InputAction @ADS => m_Wrapper.m_Player_ADS;
            public InputAction @Holster => m_Wrapper.m_Player_Holster;
            public InputAction @Reload => m_Wrapper.m_Player_Reload;
            public InputAction @Pickup => m_Wrapper.m_Player_Pickup;
            public InputAction @Drop => m_Wrapper.m_Player_Drop;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Gun_Slot_1_Choose.started += instance.OnGun_Slot_1_Choose;
                @Gun_Slot_1_Choose.performed += instance.OnGun_Slot_1_Choose;
                @Gun_Slot_1_Choose.canceled += instance.OnGun_Slot_1_Choose;
                @Gun_Slot_2_Choose.started += instance.OnGun_Slot_2_Choose;
                @Gun_Slot_2_Choose.performed += instance.OnGun_Slot_2_Choose;
                @Gun_Slot_2_Choose.canceled += instance.OnGun_Slot_2_Choose;
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @ADS.started += instance.OnADS;
                @ADS.performed += instance.OnADS;
                @ADS.canceled += instance.OnADS;
                @Holster.started += instance.OnHolster;
                @Holster.performed += instance.OnHolster;
                @Holster.canceled += instance.OnHolster;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Gun_Slot_1_Choose.started -= instance.OnGun_Slot_1_Choose;
                @Gun_Slot_1_Choose.performed -= instance.OnGun_Slot_1_Choose;
                @Gun_Slot_1_Choose.canceled -= instance.OnGun_Slot_1_Choose;
                @Gun_Slot_2_Choose.started -= instance.OnGun_Slot_2_Choose;
                @Gun_Slot_2_Choose.performed -= instance.OnGun_Slot_2_Choose;
                @Gun_Slot_2_Choose.canceled -= instance.OnGun_Slot_2_Choose;
                @Fire.started -= instance.OnFire;
                @Fire.performed -= instance.OnFire;
                @Fire.canceled -= instance.OnFire;
                @ADS.started -= instance.OnADS;
                @ADS.performed -= instance.OnADS;
                @ADS.canceled -= instance.OnADS;
                @Holster.started -= instance.OnHolster;
                @Holster.performed -= instance.OnHolster;
                @Holster.canceled -= instance.OnHolster;
                @Reload.started -= instance.OnReload;
                @Reload.performed -= instance.OnReload;
                @Reload.canceled -= instance.OnReload;
                @Pickup.started -= instance.OnPickup;
                @Pickup.performed -= instance.OnPickup;
                @Pickup.canceled -= instance.OnPickup;
                @Drop.started -= instance.OnDrop;
                @Drop.performed -= instance.OnDrop;
                @Drop.canceled -= instance.OnDrop;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        private int m_Mouse_And_KeyboardSchemeIndex = -1;
        public InputControlScheme Mouse_And_KeyboardScheme
        {
            get
            {
                if (m_Mouse_And_KeyboardSchemeIndex == -1) m_Mouse_And_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse_And_Keyboard");
                return asset.controlSchemes[m_Mouse_And_KeyboardSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnGun_Slot_1_Choose(InputAction.CallbackContext context);
            void OnGun_Slot_2_Choose(InputAction.CallbackContext context);
            void OnFire(InputAction.CallbackContext context);
            void OnADS(InputAction.CallbackContext context);
            void OnHolster(InputAction.CallbackContext context);
            void OnReload(InputAction.CallbackContext context);
            void OnPickup(InputAction.CallbackContext context);
            void OnDrop(InputAction.CallbackContext context);
        }
    }
}
