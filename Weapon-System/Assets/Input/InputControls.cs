//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Weapon_System
{
    public partial class @InputControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""5c3c2922-436a-41b5-aaf5-e1391766132c"",
            ""actions"": [
                {
                    ""name"": ""PrimaryWeapon_Select"",
                    ""type"": ""Button"",
                    ""id"": ""82111dab-77cf-49e0-8c12-d513c6e0e2cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryWeapon_Select"",
                    ""type"": ""Button"",
                    ""id"": ""afa0533e-ef77-453d-b974-e0a3700be563"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryUse"",
                    ""type"": ""Button"",
                    ""id"": ""b4433e29-da6d-42d2-9eae-0a73b547e6cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryUse"",
                    ""type"": ""Button"",
                    ""id"": ""51ddd764-507a-4167-8cb7-9ea0c01e91b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Holster"",
                    ""type"": ""Button"",
                    ""id"": ""85d4616c-9bac-48d5-af27-798f05a170ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""7a421347-e917-4f6b-98b0-781c426eb155"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""51839d25-6dac-46f3-b2a3-388307a3e582"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""d099388d-69d7-4813-9ac9-7fd329344b29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d55f65dd-b3f9-4fd0-a224-352549969460"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VerticalMove"",
                    ""type"": ""Button"",
                    ""id"": ""86bce3b0-b906-4f2e-8d9b-fef8bd68eb72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HorizontalMove"",
                    ""type"": ""Button"",
                    ""id"": ""ccfb9416-bc87-4ad1-beb8-d4cf7eb1b25c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""bff9e200-7bd8-466f-876f-af5cc5022570"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseXAxis"",
                    ""type"": ""Value"",
                    ""id"": ""3f7609a2-bcfa-4ea4-8c27-588bb6971bcd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseYAxis"",
                    ""type"": ""Value"",
                    ""id"": ""06f9051b-249e-44ef-8fe8-ea47047e5d1f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FreeLook"",
                    ""type"": ""Button"",
                    ""id"": ""9ff69cfe-92ae-4004-a085-7ed6df4587a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c0eb24f9-4d58-456e-9ff2-64b2f4c56b28"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""PrimaryWeapon_Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d06294d-4a23-424b-9476-3c51377d6a60"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""SecondaryWeapon_Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a14b08e-a5cf-4642-ae82-0f7cf23442a7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""PrimaryUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7edfe8ad-fcfb-4765-a759-b63a05787541"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""SecondaryUse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb39d51e-dd71-415a-9013-fc2651d83062"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""Holster"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""543edc80-c026-4610-ab99-c730d420a4df"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06544624-4e53-40c9-8673-4932c8b7c8e2"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c208df6-f46c-4b77-8330-ff7950bbf8fd"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e0762ba-4fea-43e5-ae11-3fa2f2396788"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7cb3f589-7730-4aa3-ac3c-c8f6d61693eb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1ac4aa6e-2f0e-4353-88dd-352fc5248e43"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""851d78a8-f64c-494f-a42d-2816179f70b9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""VerticalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""291aa8cf-6982-4cad-a2fe-fe946fcfbfe9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9ceaa6a8-0d9e-4aee-b33d-02250d996005"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""64e696ad-2f9c-4bac-80dd-769245240429"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""02b67bac-43fe-4ab7-9cfa-261afbddfa00"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d266dac8-90a1-4742-b732-1bdfe1293dca"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""MouseXAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2895b5aa-b7b8-45bf-b6f3-541eae8fd077"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse_And_Keyboard"",
                    ""action"": ""MouseYAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d20a55f9-b07e-43f9-ac28-0d28849ebd97"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FreeLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Global"",
            ""id"": ""422bd525-aeb7-41d1-bb7f-6afaf0172794"",
            ""actions"": [
                {
                    ""name"": ""Toggle_Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""19e59c8d-4bfd-4345-96cb-29c44ea811ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d258c90-e4d5-4e3c-adae-6a049c3f5508"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toggle_Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse_And_Keyboard"",
            ""bindingGroup"": ""Mouse_And_Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_PrimaryWeapon_Select = m_Player.FindAction("PrimaryWeapon_Select", throwIfNotFound: true);
            m_Player_SecondaryWeapon_Select = m_Player.FindAction("SecondaryWeapon_Select", throwIfNotFound: true);
            m_Player_PrimaryUse = m_Player.FindAction("PrimaryUse", throwIfNotFound: true);
            m_Player_SecondaryUse = m_Player.FindAction("SecondaryUse", throwIfNotFound: true);
            m_Player_Holster = m_Player.FindAction("Holster", throwIfNotFound: true);
            m_Player_Reload = m_Player.FindAction("Reload", throwIfNotFound: true);
            m_Player_Pickup = m_Player.FindAction("Pickup", throwIfNotFound: true);
            m_Player_Drop = m_Player.FindAction("Drop", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
            m_Player_VerticalMove = m_Player.FindAction("VerticalMove", throwIfNotFound: true);
            m_Player_HorizontalMove = m_Player.FindAction("HorizontalMove", throwIfNotFound: true);
            m_Player_Run = m_Player.FindAction("Run", throwIfNotFound: true);
            m_Player_MouseXAxis = m_Player.FindAction("MouseXAxis", throwIfNotFound: true);
            m_Player_MouseYAxis = m_Player.FindAction("MouseYAxis", throwIfNotFound: true);
            m_Player_FreeLook = m_Player.FindAction("FreeLook", throwIfNotFound: true);
            // Global
            m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
            m_Global_Toggle_Inventory = m_Global.FindAction("Toggle_Inventory", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_PrimaryWeapon_Select;
        private readonly InputAction m_Player_SecondaryWeapon_Select;
        private readonly InputAction m_Player_PrimaryUse;
        private readonly InputAction m_Player_SecondaryUse;
        private readonly InputAction m_Player_Holster;
        private readonly InputAction m_Player_Reload;
        private readonly InputAction m_Player_Pickup;
        private readonly InputAction m_Player_Drop;
        private readonly InputAction m_Player_Jump;
        private readonly InputAction m_Player_VerticalMove;
        private readonly InputAction m_Player_HorizontalMove;
        private readonly InputAction m_Player_Run;
        private readonly InputAction m_Player_MouseXAxis;
        private readonly InputAction m_Player_MouseYAxis;
        private readonly InputAction m_Player_FreeLook;
        public struct PlayerActions
        {
            private @InputControls m_Wrapper;
            public PlayerActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryWeapon_Select => m_Wrapper.m_Player_PrimaryWeapon_Select;
            public InputAction @SecondaryWeapon_Select => m_Wrapper.m_Player_SecondaryWeapon_Select;
            public InputAction @PrimaryUse => m_Wrapper.m_Player_PrimaryUse;
            public InputAction @SecondaryUse => m_Wrapper.m_Player_SecondaryUse;
            public InputAction @Holster => m_Wrapper.m_Player_Holster;
            public InputAction @Reload => m_Wrapper.m_Player_Reload;
            public InputAction @Pickup => m_Wrapper.m_Player_Pickup;
            public InputAction @Drop => m_Wrapper.m_Player_Drop;
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            public InputAction @VerticalMove => m_Wrapper.m_Player_VerticalMove;
            public InputAction @HorizontalMove => m_Wrapper.m_Player_HorizontalMove;
            public InputAction @Run => m_Wrapper.m_Player_Run;
            public InputAction @MouseXAxis => m_Wrapper.m_Player_MouseXAxis;
            public InputAction @MouseYAxis => m_Wrapper.m_Player_MouseYAxis;
            public InputAction @FreeLook => m_Wrapper.m_Player_FreeLook;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @PrimaryWeapon_Select.started += instance.OnPrimaryWeapon_Select;
                @PrimaryWeapon_Select.performed += instance.OnPrimaryWeapon_Select;
                @PrimaryWeapon_Select.canceled += instance.OnPrimaryWeapon_Select;
                @SecondaryWeapon_Select.started += instance.OnSecondaryWeapon_Select;
                @SecondaryWeapon_Select.performed += instance.OnSecondaryWeapon_Select;
                @SecondaryWeapon_Select.canceled += instance.OnSecondaryWeapon_Select;
                @PrimaryUse.started += instance.OnPrimaryUse;
                @PrimaryUse.performed += instance.OnPrimaryUse;
                @PrimaryUse.canceled += instance.OnPrimaryUse;
                @SecondaryUse.started += instance.OnSecondaryUse;
                @SecondaryUse.performed += instance.OnSecondaryUse;
                @SecondaryUse.canceled += instance.OnSecondaryUse;
                @Holster.started += instance.OnHolster;
                @Holster.performed += instance.OnHolster;
                @Holster.canceled += instance.OnHolster;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @VerticalMove.started += instance.OnVerticalMove;
                @VerticalMove.performed += instance.OnVerticalMove;
                @VerticalMove.canceled += instance.OnVerticalMove;
                @HorizontalMove.started += instance.OnHorizontalMove;
                @HorizontalMove.performed += instance.OnHorizontalMove;
                @HorizontalMove.canceled += instance.OnHorizontalMove;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @MouseXAxis.started += instance.OnMouseXAxis;
                @MouseXAxis.performed += instance.OnMouseXAxis;
                @MouseXAxis.canceled += instance.OnMouseXAxis;
                @MouseYAxis.started += instance.OnMouseYAxis;
                @MouseYAxis.performed += instance.OnMouseYAxis;
                @MouseYAxis.canceled += instance.OnMouseYAxis;
                @FreeLook.started += instance.OnFreeLook;
                @FreeLook.performed += instance.OnFreeLook;
                @FreeLook.canceled += instance.OnFreeLook;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @PrimaryWeapon_Select.started -= instance.OnPrimaryWeapon_Select;
                @PrimaryWeapon_Select.performed -= instance.OnPrimaryWeapon_Select;
                @PrimaryWeapon_Select.canceled -= instance.OnPrimaryWeapon_Select;
                @SecondaryWeapon_Select.started -= instance.OnSecondaryWeapon_Select;
                @SecondaryWeapon_Select.performed -= instance.OnSecondaryWeapon_Select;
                @SecondaryWeapon_Select.canceled -= instance.OnSecondaryWeapon_Select;
                @PrimaryUse.started -= instance.OnPrimaryUse;
                @PrimaryUse.performed -= instance.OnPrimaryUse;
                @PrimaryUse.canceled -= instance.OnPrimaryUse;
                @SecondaryUse.started -= instance.OnSecondaryUse;
                @SecondaryUse.performed -= instance.OnSecondaryUse;
                @SecondaryUse.canceled -= instance.OnSecondaryUse;
                @Holster.started -= instance.OnHolster;
                @Holster.performed -= instance.OnHolster;
                @Holster.canceled -= instance.OnHolster;
                @Reload.started -= instance.OnReload;
                @Reload.performed -= instance.OnReload;
                @Reload.canceled -= instance.OnReload;
                @Pickup.started -= instance.OnPickup;
                @Pickup.performed -= instance.OnPickup;
                @Pickup.canceled -= instance.OnPickup;
                @Drop.started -= instance.OnDrop;
                @Drop.performed -= instance.OnDrop;
                @Drop.canceled -= instance.OnDrop;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @VerticalMove.started -= instance.OnVerticalMove;
                @VerticalMove.performed -= instance.OnVerticalMove;
                @VerticalMove.canceled -= instance.OnVerticalMove;
                @HorizontalMove.started -= instance.OnHorizontalMove;
                @HorizontalMove.performed -= instance.OnHorizontalMove;
                @HorizontalMove.canceled -= instance.OnHorizontalMove;
                @Run.started -= instance.OnRun;
                @Run.performed -= instance.OnRun;
                @Run.canceled -= instance.OnRun;
                @MouseXAxis.started -= instance.OnMouseXAxis;
                @MouseXAxis.performed -= instance.OnMouseXAxis;
                @MouseXAxis.canceled -= instance.OnMouseXAxis;
                @MouseYAxis.started -= instance.OnMouseYAxis;
                @MouseYAxis.performed -= instance.OnMouseYAxis;
                @MouseYAxis.canceled -= instance.OnMouseYAxis;
                @FreeLook.started -= instance.OnFreeLook;
                @FreeLook.performed -= instance.OnFreeLook;
                @FreeLook.canceled -= instance.OnFreeLook;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Global
        private readonly InputActionMap m_Global;
        private List<IGlobalActions> m_GlobalActionsCallbackInterfaces = new List<IGlobalActions>();
        private readonly InputAction m_Global_Toggle_Inventory;
        public struct GlobalActions
        {
            private @InputControls m_Wrapper;
            public GlobalActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Toggle_Inventory => m_Wrapper.m_Global_Toggle_Inventory;
            public InputActionMap Get() { return m_Wrapper.m_Global; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
            public void AddCallbacks(IGlobalActions instance)
            {
                if (instance == null || m_Wrapper.m_GlobalActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GlobalActionsCallbackInterfaces.Add(instance);
                @Toggle_Inventory.started += instance.OnToggle_Inventory;
                @Toggle_Inventory.performed += instance.OnToggle_Inventory;
                @Toggle_Inventory.canceled += instance.OnToggle_Inventory;
            }

            private void UnregisterCallbacks(IGlobalActions instance)
            {
                @Toggle_Inventory.started -= instance.OnToggle_Inventory;
                @Toggle_Inventory.performed -= instance.OnToggle_Inventory;
                @Toggle_Inventory.canceled -= instance.OnToggle_Inventory;
            }

            public void RemoveCallbacks(IGlobalActions instance)
            {
                if (m_Wrapper.m_GlobalActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGlobalActions instance)
            {
                foreach (var item in m_Wrapper.m_GlobalActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GlobalActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GlobalActions @Global => new GlobalActions(this);
        private int m_Mouse_And_KeyboardSchemeIndex = -1;
        public InputControlScheme Mouse_And_KeyboardScheme
        {
            get
            {
                if (m_Mouse_And_KeyboardSchemeIndex == -1) m_Mouse_And_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse_And_Keyboard");
                return asset.controlSchemes[m_Mouse_And_KeyboardSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnPrimaryWeapon_Select(InputAction.CallbackContext context);
            void OnSecondaryWeapon_Select(InputAction.CallbackContext context);
            void OnPrimaryUse(InputAction.CallbackContext context);
            void OnSecondaryUse(InputAction.CallbackContext context);
            void OnHolster(InputAction.CallbackContext context);
            void OnReload(InputAction.CallbackContext context);
            void OnPickup(InputAction.CallbackContext context);
            void OnDrop(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnVerticalMove(InputAction.CallbackContext context);
            void OnHorizontalMove(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
            void OnMouseXAxis(InputAction.CallbackContext context);
            void OnMouseYAxis(InputAction.CallbackContext context);
            void OnFreeLook(InputAction.CallbackContext context);
        }
        public interface IGlobalActions
        {
            void OnToggle_Inventory(InputAction.CallbackContext context);
        }
    }
}
